import { Query, QuerySortDirection } from "./repositories";
import * as Q from './protocol';
import { decoratedFetch as fetch } from 'dopees-core/lib/fetch';
import * as utf8 from 'dopees-core/lib/utf8';
const checkNum = (n, message) => {
    if (n % 1 !== 0 || n <= 0) {
        throw new TypeError(message);
    }
};
const supportsAbortController = (function () {
    if (window.AbortController) {
        return true;
    }
    return false;
}());
function linkAbortion(cancellation) {
    let signal;
    let subscription;
    if (undefined !== cancellation && supportsAbortController) {
        const abortController = new AbortController();
        signal = abortController.signal;
        subscription = cancellation.subscribe(() => abortController.abort());
    }
    else {
        signal = undefined;
        subscription = { remove() { } };
    }
    return { signal, subscription };
}
export class KeyRestRepository {
    constructor(options) {
        this.options = options;
    }
    get collectionEndpoint() {
        return `${this.endpoint}/${this.type}`;
    }
    get protocolVersion() {
        return this.options.protocolVersion || 2;
    }
    get type() {
        return this.options.type;
    }
    get endpoint() {
        return this.options.endpoint;
    }
    get keyProperty() {
        return this.options.keyProperty || 'id';
    }
    get items() {
        return new RestQuery(this, 0, RestQuery.defaultCount);
    }
    getKey(item) {
        return item[this.keyProperty];
    }
    hasKey(item) {
        return !!this.getKey(item);
    }
    itemEndpoint(item) {
        return `${this.endpoint}/${this.type}/${this.getKey(item)}`;
    }
    __getErrors(response) {
        const messages = response.headers.get('X-Message');
        if (messages) {
            const msgs = messages.split(',').map(decodeURIComponent);
            if (msgs.length === 1) {
                return msgs[0];
            }
            return msgs;
        }
        return response.statusText;
    }
    async lookup(key, cancellation) {
        const abortion = linkAbortion(cancellation);
        try {
            const uri = `${this.endpoint}/${this.type}/${key}`;
            const response = await fetch(uri, {
                method: 'GET',
                headers: { 'Accept': 'application/json' },
                signal: abortion.signal
            });
            if (response.ok) {
                return await response.json();
            }
            throw this.__getErrors(response);
        }
        finally {
            abortion.subscription.remove();
        }
    }
    async update(item, cancellation) {
        const abortion = linkAbortion(cancellation);
        try {
            const response = await fetch(this.itemEndpoint(item), {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(item),
                signal: abortion.signal
            });
            if (response.ok) {
                return await this.lookup(this.getKey(item), cancellation);
            }
            throw this.__getErrors(response);
        }
        finally {
            abortion.subscription.remove();
        }
    }
    async insert(item, cancellation) {
        const abortion = linkAbortion(cancellation);
        try {
            const response = await fetch(this.collectionEndpoint, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(item),
                signal: abortion.signal
            });
            if (response.ok) {
                const uri = response.headers.get('Location');
                if (!uri) {
                    throw new Error('rest insert did not return a location');
                }
                const lookupAbortion = linkAbortion(cancellation);
                try {
                    const resp = await fetch(uri, {
                        method: 'GET',
                        headers: { 'Accept': 'application/json' },
                        signal: lookupAbortion.signal
                    });
                    if (resp.ok) {
                        return await resp.json();
                    }
                    throw this.__getErrors(resp);
                }
                finally {
                    lookupAbortion.subscription.remove();
                }
            }
            throw this.__getErrors(response);
        }
        finally {
            abortion.subscription.remove();
        }
    }
    remove(item, cancellation) {
        throw new Error("Method not implemented.");
    }
    async total(predicate, cancellation) {
        const abortion = linkAbortion(cancellation);
        try {
            const headers = new Headers();
            headers.append('Accept', 'application/json');
            headers.append('X-Filter', predicate);
            const response = await fetch(this.collectionEndpoint, { headers, signal: abortion.signal });
            if (response.ok) {
                const header = response.headers.get('X-Total-Count');
                return header ? (parseInt(header, 10) || 0) : 0;
            }
            else {
                throw new Error(`Hiba lépett fel adatok lekérdezése közben: ${response.statusText}`);
            }
        }
        finally {
            abortion.subscription.remove();
        }
    }
    exec(offset, count, predicate, sortBy, sortByDirection) {
        const repo = this;
        let error = null;
        let items = null;
        let index = 0;
        return {
            async next(cancellation) {
                cancellation && cancellation.throwIfCancelled();
                if (null !== error) {
                    throw error;
                }
                if (!items) {
                    // Első next() meghívásakor ez fut le.
                    const abortion = linkAbortion(cancellation);
                    try {
                        const headers = new Headers();
                        headers.append('Accept', 'application/json');
                        headers.append('X-Offset', String(offset));
                        headers.append('X-Count', String(count));
                        headers.append('X-Filter', predicate);
                        headers.append('X-Sort-By', sortBy || '');
                        headers.append('X-Sort-By-Direction', sortByDirection || '');
                        const response = await fetch(repo.collectionEndpoint, { headers, signal: abortion.signal });
                        if (response.ok) {
                            items = await response.json();
                        }
                        else {
                            error = new Error(`Hiba lépett fel adatok lekérdezése közben: ${response.statusText}`);
                            throw error;
                        }
                    }
                    finally {
                        abortion.subscription.remove();
                    }
                }
                if (!items) {
                    throw new Error('should never happen');
                }
                if (index >= items.length) {
                    return { done: true, value: undefined };
                }
                const value = items[index];
                ++index;
                return {
                    done: false,
                    value: value
                };
            },
            cancel() {
                //FIXME: implement
            }
        };
    }
}
const regex = /[\0-\x08\n-\x1F\x7F-\uFFFF]/g;
class RestQuery extends Query {
    constructor(repo, offset, count, predicate, sortBy, sortByDirection) {
        super();
        this.repo = repo;
        this.offset = offset || 0;
        this.count = 0 === count ? count : (count || RestQuery.defaultCount);
        this.predicate = predicate || null;
        this.sortBy = sortBy || '';
        this.sortByDirection = sortByDirection || QuerySortDirection.Asc;
    }
    escape(input) {
        if (!input) {
            return '';
        }
        const inp = input instanceof Q.Expr ? input.toString() : input;
        return utf8.utf8encode(inp).replace(regex, m => '%' + ('0' + m.charCodeAt(0).toString(16).toUpperCase()).slice(-2));
    }
    get escapedPredicate() {
        return this.escape(this.predicate);
    }
    get escapedSortBy() {
        return this.escape(this.sortBy);
    }
    filter(predicate) {
        const p = 'string' === typeof predicate ? Q.parse(predicate) : predicate;
        if (!(p instanceof Q.Lambda)) {
            throw TypeError('predicate must be a lambda expression');
        }
        return new RestQuery(this.repo, this.offset, this.count, this.predicate ? this.predicate.and(p) : p, this.sortBy, this.sortByDirection);
    }
    skip(n) {
        if (0 === n) {
            return this;
        }
        checkNum(n, 'skip parameter must be non-negative whole number.');
        return new RestQuery(this.repo, n, // TODO: Ezt végig kell gondolni, mert lehet (this.offset + n) kellene ide?
        this.count, this.predicate, this.sortBy, this.sortByDirection);
    }
    take(n) {
        checkNum(n, 'take parameter must be non-negative whole number.');
        return new RestQuery(this.repo, this.offset, n, this.predicate, this.sortBy, this.sortByDirection);
    }
    orderBy(selector, direction) {
        return new RestQuery(this.repo, this.offset, this.count, this.predicate, selector, direction || QuerySortDirection.Asc);
    }
    async total(cancellation) {
        return this.repo.total(this.escapedPredicate, cancellation);
    }
    exec() {
        return this.repo.exec(this.offset, this.count, this.escapedPredicate, this.sortBy, this.sortByDirection);
    }
}
RestQuery.defaultCount = 100000;
;
//# sourceMappingURL=data:application/json;base64,
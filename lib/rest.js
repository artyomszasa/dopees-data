import { Query, QuerySortDirection } from "./repositories";
import * as Q from './protocol';
const checkNum = (n, message) => {
    if (n % 1 !== 0 || n <= 0) {
        throw new TypeError(message);
    }
};
const supportsAbortController = (function () {
    if (window.AbortController) {
        return true;
    }
    return false;
}());
function linkAbortion(cancellation) {
    let signal;
    let subscription;
    if (undefined !== cancellation && supportsAbortController) {
        const abortController = new AbortController();
        signal = abortController.signal;
        subscription = cancellation.subscribe(() => abortController.abort());
    }
    else {
        signal = undefined;
        subscription = { remove() { } };
    }
    return { signal, subscription };
}
export class KeyRestRepository {
    constructor(options) {
        this.options = options;
    }
    get collectionEndpoint() {
        return `${this.endpoint}/${this.type}`;
    }
    get protocolVersion() {
        return this.options.protocolVersion || 2;
    }
    get type() {
        return this.options.type;
    }
    get endpoint() {
        return this.options.endpoint;
    }
    get keyProperty() {
        return this.options.keyProperty || 'id';
    }
    get items() {
        return new RestQuery(this, 0, RestQuery.defaultCount);
    }
    getKey(item) {
        return item[this.keyProperty];
    }
    hasKey(item) {
        return !!this.getKey(item);
    }
    itemEndpoint(item) {
        return `${this.endpoint}/${this.type}/${this.getKey(item)}`;
    }
    __getErrors(response) {
        const messages = response.headers.get('X-Message');
        if (messages) {
            const msgs = messages.split(',').map(decodeURIComponent);
            if (msgs.length === 1) {
                return msgs[0];
            }
            return msgs;
        }
        return response.statusText;
    }
    async lookup(key, cancellation) {
        const abortion = linkAbortion(cancellation);
        try {
            const uri = `${this.endpoint}/${this.type}/${key}`;
            const response = await window.fetch(uri, {
                method: 'GET',
                headers: { 'Accept': 'application/json' },
                signal: abortion.signal
            });
            if (response.ok) {
                return await response.json();
            }
            throw this.__getErrors(response);
        }
        finally {
            abortion.subscription.remove();
        }
    }
    async update(item, cancellation) {
        const abortion = linkAbortion(cancellation);
        try {
            const response = await window.fetch(this.itemEndpoint(item), {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(item),
                signal: abortion.signal
            });
            if (response.ok) {
                return await this.lookup(this.getKey(item), cancellation);
            }
            throw this.__getErrors(response);
        }
        finally {
            abortion.subscription.remove();
        }
    }
    async insert(item, cancellation) {
        const abortion = linkAbortion(cancellation);
        try {
            const response = await window.fetch(this.collectionEndpoint, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(item),
                signal: abortion.signal
            });
            if (response.ok) {
                const uri = response.headers.get('Location');
                if (!uri) {
                    throw new Error('rest insert did not return a location');
                }
                const lookupAbortion = linkAbortion(cancellation);
                try {
                    const resp = await window.fetch(uri, {
                        method: 'GET',
                        headers: { 'Accept': 'application/json' },
                        signal: lookupAbortion.signal
                    });
                    if (resp.ok) {
                        return await resp.json();
                    }
                    throw this.__getErrors(resp);
                }
                finally {
                    lookupAbortion.subscription.remove();
                }
            }
            throw this.__getErrors(response);
        }
        finally {
            abortion.subscription.remove();
        }
    }
    remove(item, cancellation) {
        throw new Error("Method not implemented.");
    }
    async total(predicate, cancellation) {
        const abortion = linkAbortion(cancellation);
        try {
            const headers = new Headers();
            headers.append('Accept', 'application/json');
            headers.append('X-Filter', predicate);
            const response = await window.fetch(this.collectionEndpoint, { headers, signal: abortion.signal });
            if (response.ok) {
                const header = response.headers.get('X-Total-Count');
                return header ? (parseInt(header, 10) || 0) : 0;
            }
            else {
                throw new Error(`Hiba lépett fel adatok lekérdezése közben: ${response.statusText}`);
            }
        }
        finally {
            abortion.subscription.remove();
        }
    }
    exec(offset, count, predicate, sortBy, sortByDirection) {
        const repo = this;
        let error = null;
        let items = null;
        let index = 0;
        return {
            async next(cancellation) {
                cancellation && cancellation.throwIfCancelled();
                if (null !== error) {
                    throw error;
                }
                if (!items) {
                    // Első next() meghívásakor ez fut le.
                    const abortion = linkAbortion(cancellation);
                    try {
                        const headers = new Headers();
                        headers.append('Accept', 'application/json');
                        headers.append('X-Offset', String(offset));
                        headers.append('X-Count', String(count));
                        headers.append('X-Filter', predicate);
                        headers.append('X-Sort-By', sortBy || '');
                        headers.append('X-Sort-By-Direction', sortByDirection || '');
                        const response = await window.fetch(repo.collectionEndpoint, { headers, signal: abortion.signal });
                        if (response.ok) {
                            items = await response.json();
                        }
                        else {
                            error = new Error(`Hiba lépett fel adatok lekérdezése közben: ${response.statusText}`);
                            throw error;
                        }
                    }
                    finally {
                        abortion.subscription.remove();
                    }
                }
                if (!items) {
                    throw new Error('should never happen');
                }
                if (index >= items.length) {
                    return { done: true, value: undefined };
                }
                const value = items[index];
                ++index;
                return {
                    done: false,
                    value: value
                };
            },
            cancel() {
                //FIXME: implement
            }
        };
    }
}
class RestQuery extends Query {
    constructor(repo, offset, count, predicate, sortBy, sortByDirection) {
        super();
        this.repo = repo;
        this.offset = offset || 0;
        this.count = 0 === count ? count : (count || RestQuery.defaultCount);
        this.predicate = predicate || null;
        this.sortBy = sortBy || '';
        this.sortByDirection = sortByDirection || QuerySortDirection.Asc;
    }
    escape(input) {
        if (!input) {
            return '';
        }
        const inp = input instanceof Q.Expr ? input.toString() : input;
        // return window.utf8.encode(inp).replace(regex, m => '%' + ('0' + m.charCodeAt(0).toString(16).toUpperCase()).slice(-2));
        return inp;
    }
    get escapedPredicate() {
        return this.escape(this.predicate);
    }
    get escapedSortBy() {
        return this.escape(this.sortBy);
    }
    filter(predicate) {
        const p = 'string' === typeof predicate ? Q.parse(predicate) : predicate;
        if (!(p instanceof Q.Lambda)) {
            throw TypeError('predicate must be a lambda expression');
        }
        return new RestQuery(this.repo, this.offset, this.count, this.predicate ? this.predicate.and(p) : p, this.sortBy, this.sortByDirection);
    }
    skip(n) {
        if (0 === n) {
            return this;
        }
        checkNum(n, 'skip parameter must be non-negative whole number.');
        return new RestQuery(this.repo, n, // TODO: Ezt végig kell gondolni, mert lehet (this.offset + n) kellene ide?
        this.count, this.predicate, this.sortBy, this.sortByDirection);
    }
    take(n) {
        checkNum(n, 'take parameter must be non-negative whole number.');
        return new RestQuery(this.repo, this.offset, n, this.predicate, this.sortBy, this.sortByDirection);
    }
    orderBy(selector, direction) {
        return new RestQuery(this.repo, this.offset, this.count, this.predicate, selector, direction || QuerySortDirection.Asc);
    }
    async total(cancellation) {
        return this.repo.total(this.escapedPredicate, cancellation);
    }
    exec() {
        return this.repo.exec(this.offset, this.count, this.escapedPredicate, this.sortBy, this.sortByDirection);
    }
}
RestQuery.defaultCount = 100000;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQXdDLGtCQUFrQixFQUErQixNQUFNLGdCQUFnQixDQUFBO0FBQzdILE9BQU8sS0FBSyxDQUFDLE1BQU0sWUFBWSxDQUFBO0FBRy9CLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBUyxFQUFFLE9BQWUsRUFBRSxFQUFFO0lBQzlDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN6QixNQUFNLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzlCO0FBQ0gsQ0FBQyxDQUFBO0FBU0QsTUFBTSx1QkFBdUIsR0FBRyxDQUFDO0lBQy9CLElBQUssTUFBYyxDQUFDLGVBQWUsRUFBRTtRQUNuQyxPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBT0wsU0FBUyxZQUFZLENBQUMsWUFBMkI7SUFDL0MsSUFBSSxNQUE2QixDQUFDO0lBQ2xDLElBQUksWUFBZ0MsQ0FBQztJQUNyQyxJQUFJLFNBQVMsS0FBSyxZQUFZLElBQUksdUJBQXVCLEVBQUU7UUFDekQsTUFBTSxlQUFlLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQztRQUM5QyxNQUFNLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQztRQUNoQyxZQUFZLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN0RTtTQUFNO1FBQ0wsTUFBTSxHQUFHLFNBQVMsQ0FBQztRQUNuQixZQUFZLEdBQUcsRUFBRSxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7S0FDakM7SUFDRCxPQUFPLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxDQUFDO0FBQ2xDLENB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bnRlbnQiOlsiaW1wb3J0IHsgUXVlcnksIFJlcG9zaXRvcnksIENhbmNlbGxhYmxlQXN5bmNJdGVyYXRvciwgUXVlcnlTb3J0RGlyZWN0aW9uLCBLZXlSZXBvc2l0b3J5LCBDYW5jZWxsYXRpb24gfSBmcm9tIFwiLi9yZXBvc2l0b3JpZXNcIlxuaW1wb3J0ICogYXMgUSBmcm9tICcuL3Byb3RvY29sJ1xuXG5cbmNvbnN0IGNoZWNrTnVtID0gKG46IG51bWJlciwgbWVzc2FnZTogc3RyaW5nKSA9PiB7XG4gIGlmIChuICUgMSAhPT0gMCB8fCBuIDw9IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG5cbmludGVyZmFjZSBSZXN0UmVwb3NpdG9yeU9wdGlvbnMge1xuICB0eXBlOiBzdHJpbmc7XG4gIGVuZHBvaW50OiBzdHJpbmc7XG4gIGtleVByb3BlcnR5Pzogc3RyaW5nO1xuICBwcm90b2NvbFZlcnNpb24/OiBudW1iZXI7XG59XG5cbmNvbnN0IHN1cHBvcnRzQWJvcnRDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKCh3aW5kb3cgYXMgYW55KS5BYm9ydENvbnRyb2xsZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59KCkpO1xuXG5pbnRlcmZhY2UgQWJvcnRpb24ge1xuICBzaWduYWw6IEFib3J0U2lnbmFsfHVuZGVmaW5lZFxuICBzdWJzY3JpcHRpb246IHsgcmVtb3ZlKCk6IHZvaWQgfVxufVxuXG5mdW5jdGlvbiBsaW5rQWJvcnRpb24oY2FuY2VsbGF0aW9uPzogQ2FuY2VsbGF0aW9uKTogQWJvcnRpb24ge1xuICBsZXQgc2lnbmFsOiBBYm9ydFNpZ25hbHx1bmRlZmluZWQ7XG4gIGxldCBzdWJzY3JpcHRpb246IHsgcmVtb3ZlKCk6IHZvaWQgfTtcbiAgaWYgKHVuZGVmaW5lZCAhPT0gY2FuY2VsbGF0aW9uICYmIHN1cHBvcnRzQWJvcnRDb250cm9sbGVyKSB7XG4gICAgY29uc3QgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIHNpZ25hbCA9IGFib3J0Q29udHJvbGxlci5zaWduYWw7XG4gICAgc3Vic2NyaXB0aW9uID0gY2FuY2VsbGF0aW9uLnN1YnNjcmliZSgoKSA9PiBhYm9ydENvbnRyb2xsZXIuYWJvcnQoKSk7XG4gIH0gZWxzZSB7XG4gICAgc2lnbmFsID0gdW5kZWZpbmVkO1xuICAgIHN1YnNjcmlwdGlvbiA9IHsgcmVtb3ZlKCkgeyB9IH07XG4gIH1cbiAgcmV0dXJuIHsgc2lnbmFsLCBzdWJzY3JpcHRpb24gfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXN0UmVwb3NpdG9yeTxUPiBleHRlbmRzIFJlcG9zaXRvcnk8VD4ge1xuICBleGVjKG9mZnNldDogbnVtYmVyLCBjb3VudDogbnVtYmVyLCBwcmVkaWNhdGU6IHN0cmluZywgc29ydEJ5Pzogc3RyaW5nLCBzb3J0QnlEaXJlY3Rpb24/OiBRdWVyeVNvcnREaXJlY3Rpb24pOiBDYW5jZWxsYWJsZUFzeW5jSXRlcmF0b3I8VD47XG4gIHRvdGFsKHByZWRpY2F0ZTogc3RyaW5nLCBjYW5jZWxsYXRpb246IENhbmNlbGxhdGlvbik6IFByb21pc2U8bnVtYmVyPjtcbn1cblxuZXhwb3J0IGNsYXNzIEtleVJlc3RSZXBvc2l0b3J5PFREYXRhLCBUS2V5PiBpbXBsZW1lbnRzIEtleVJlcG9zaXRvcnk8VERhdGEsIFRLZXk+LCBSZXN0UmVwb3NpdG9yeTxURGF0YT4ge1xuICByZWFkb25seSBvcHRpb25zIDogUmVzdFJlcG9zaXRvcnlPcHRpb25zXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFJlc3RSZXBvc2l0b3J5T3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgcHJpdmF0ZSBnZXQgY29sbGVjdGlvbkVuZHBvaW50ICgpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5lbmRwb2ludH0vJHt0aGlzLnR5cGV9YDtcbiAgfVxuICBnZXQgcHJvdG9jb2xWZXJzaW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnByb3RvY29sVmVyc2lvbiB8fCAyO1xuICB9XG4gIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnR5cGU7XG4gIH1cbiAgZ2V0IGVuZHBvaW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmVuZHBvaW50O1xuICB9XG4gIGdldCBrZXlQcm9wZXJ0eSAoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5rZXlQcm9wZXJ0eSB8fCAnaWQnO1xuICB9XG4gIGdldCBpdGVtcygpOiBRdWVyeTxURGF0YT4ge1xuICAgIHJldHVybiBuZXcgUmVzdFF1ZXJ5PFREYXRhPih0aGlzLCAwLCBSZXN0UXVlcnkuZGVmYXVsdENvdW50KTtcbiAgfVxuICBwcml2YXRlIGdldEtleShpdGVtOiBURGF0YSkge1xuICAgIHJldHVybiAoaXRlbSBhcyBhbnkpW3RoaXMua2V5UHJvcGVydHldIGFzIFRLZXk7XG4gIH1cbiAgcHJpdmF0ZSBoYXNLZXkoaXRlbTogVERhdGEpIHtcbiAgICByZXR1cm4gISF0aGlzLmdldEtleShpdGVtKTtcbiAgfVxuICBwcml2YXRlIGl0ZW1FbmRwb2ludChpdGVtOiBURGF0YSkge1xuICAgIHJldHVybiBgJHt0aGlzLmVuZHBvaW50fS8ke3RoaXMudHlwZX0vJHt0aGlzLmdldEtleShpdGVtKX1gO1xuICB9XG4gIHByaXZhdGUgX19nZXRFcnJvcnMgKHJlc3BvbnNlOiBSZXNwb25zZSkge1xuICAgIGNvbnN0IG1lc3NhZ2VzID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ1gtTWVzc2FnZScpO1xuICAgIGlmIChtZXNzYWdlcykge1xuICAgICAgY29uc3QgbXNncyA9IG1lc3NhZ2VzLnNwbGl0KCcsJykubWFwKGRlY29kZVVSSUNvbXBvbmVudCk7XG4gICAgICBpZiAobXNncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIG1zZ3NbMF07XG4gICAgICB9XG4gICAgICByZXR1cm4gbXNncztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1c1RleHQ7XG4gIH1cbiAgYXN5bmMgbG9va3VwKGtleTogVEtleSwgY2FuY2VsbGF0aW9uPzogQ2FuY2VsbGF0aW9uKTogUHJvbWlzZTxURGF0YT4ge1xuICAgIGNvbnN0IGFib3J0aW9uID0gbGlua0Fib3J0aW9uKGNhbmNlbGxhdGlvbik7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVyaSA9IGAke3RoaXMuZW5kcG9pbnR9LyR7dGhpcy50eXBlfS8ke2tleX1gO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB3aW5kb3cuZmV0Y2godXJpLCB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIGhlYWRlcnM6IHsgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICBzaWduYWw6IGFib3J0aW9uLnNpZ25hbFxuICAgICAgfSk7XG4gICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIH1cbiAgICAgIHRocm93IHRoaXMuX19nZXRFcnJvcnMocmVzcG9uc2UpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBhYm9ydGlvbi5zdWJzY3JpcHRpb24ucmVtb3ZlKCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIHVwZGF0ZShpdGVtOiBURGF0YSwgY2FuY2VsbGF0aW9uPzogQ2FuY2VsbGF0aW9uKTogUHJvbWlzZTxURGF0YT4ge1xuICAgIGNvbnN0IGFib3J0aW9uID0gbGlua0Fib3J0aW9uKGNhbmNlbGxhdGlvbik7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgd2luZG93LmZldGNoKHRoaXMuaXRlbUVuZHBvaW50KGl0ZW0pLCB7XG4gICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGl0ZW0pLFxuICAgICAgICBzaWduYWw6IGFib3J0aW9uLnNpZ25hbFxuICAgICAgfSk7XG4gICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMubG9va3VwKHRoaXMuZ2V0S2V5KGl0ZW0pLCBjYW5jZWxsYXRpb24pO1xuICAgICAgfVxuICAgICAgdGhyb3cgdGhpcy5fX2dldEVycm9ycyhyZXNwb25zZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGFib3J0aW9uLnN1YnNjcmlwdGlvbi5yZW1vdmUoKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgaW5zZXJ0KGl0ZW06IFREYXRhLCBjYW5jZWxsYXRpb246IENhbmNlbGxhdGlvbik6IFByb21pc2U8VERhdGE+IHtcbiAgICBjb25zdCBhYm9ydGlvbiA9IGxpbmtBYm9ydGlvbihjYW5jZWxsYXRpb24pO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHdpbmRvdy5mZXRjaCh0aGlzLmNvbGxlY3Rpb25FbmRwb2ludCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGl0ZW0pLFxuICAgICAgICBzaWduYWw6IGFib3J0aW9uLnNpZ25hbFxuICAgICAgfSk7XG4gICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgY29uc3QgdXJpID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ0xvY2F0aW9uJyk7XG4gICAgICAgIGlmICghdXJpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZXN0IGluc2VydCBkaWQgbm90IHJldHVybiBhIGxvY2F0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9va3VwQWJvcnRpb24gPSBsaW5rQWJvcnRpb24oY2FuY2VsbGF0aW9uKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgd2luZG93LmZldGNoKHVyaSwge1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICAgICAgc2lnbmFsOiBsb29rdXBBYm9ydGlvbi5zaWduYWxcbiAgICAgICAgICB9KVxuICAgICAgICAgIGlmIChyZXNwLm9rKSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgcmVzcC5qc29uKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IHRoaXMuX19nZXRFcnJvcnMocmVzcCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgbG9va3VwQWJvcnRpb24uc3Vic2NyaXB0aW9uLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aHJvdyB0aGlzLl9fZ2V0RXJyb3JzKHJlc3BvbnNlKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgYWJvcnRpb24uc3Vic2NyaXB0aW9uLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuICByZW1vdmUoaXRlbTogVERhdGEsIGNhbmNlbGxhdGlvbjogQ2FuY2VsbGF0aW9uKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gIH1cbiAgYXN5bmMgdG90YWwocHJlZGljYXRlOiBzdHJpbmcsIGNhbmNlbGxhdGlvbjogQ2FuY2VsbGF0aW9uKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCBhYm9ydGlvbiA9IGxpbmtBYm9ydGlvbihjYW5jZWxsYXRpb24pO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgICAgIGhlYWRlcnMuYXBwZW5kKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgaGVhZGVycy5hcHBlbmQoJ1gtRmlsdGVyJywgcHJlZGljYXRlKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgd2luZG93LmZldGNoKHRoaXMuY29sbGVjdGlvbkVuZHBvaW50LCB7IGhlYWRlcnMsIHNpZ25hbDogYWJvcnRpb24uc2lnbmFsIH0pO1xuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdYLVRvdGFsLUNvdW50Jyk7XG4gICAgICAgIHJldHVybiBoZWFkZXIgPyAocGFyc2VJbnQoaGVhZGVyLCAxMCkgfHwgMCkgOiAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIaWJhIGzDqXBldHQgZmVsIGFkYXRvayBsZWvDqXJkZXrDqXNlIGvDtnpiZW46ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgYWJvcnRpb24uc3Vic2NyaXB0aW9uLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuICBleGVjKG9mZnNldDogbnVtYmVyLCBjb3VudDogbnVtYmVyLCBwcmVkaWNhdGU6IHN0cmluZywgc29ydEJ5Pzogc3RyaW5nLCBzb3J0QnlEaXJlY3Rpb24/OiBRdWVyeVNvcnREaXJlY3Rpb24pOiBDYW5jZWxsYWJsZUFzeW5jSXRlcmF0b3I8VERhdGE+IHtcbiAgICBjb25zdCByZXBvID0gdGhpcztcbiAgICBsZXQgZXJyb3IgOiBhbnkgPSBudWxsO1xuICAgIGxldCBpdGVtcyA6IFREYXRhW118bnVsbCA9IG51bGw7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICByZXR1cm4ge1xuICAgICAgYXN5bmMgbmV4dChjYW5jZWxsYXRpb24/OiBDYW5jZWxsYXRpb24pOiBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PFREYXRhPj4ge1xuICAgICAgICBjYW5jZWxsYXRpb24gJiYgY2FuY2VsbGF0aW9uLnRocm93SWZDYW5jZWxsZWQoKTtcbiAgICAgICAgaWYgKG51bGwgIT09IGVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpdGVtcykge1xuICAgICAgICAgIC8vIEVsc8WRIG5leHQoKSBtZWdow612w6FzYWtvciBleiBmdXQgbGUuXG4gICAgICAgICAgY29uc3QgYWJvcnRpb24gPSBsaW5rQWJvcnRpb24oY2FuY2VsbGF0aW9uKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG4gICAgICAgICAgICBoZWFkZXJzLmFwcGVuZCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKCdYLU9mZnNldCcsIFN0cmluZyhvZmZzZXQpKTtcbiAgICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKCdYLUNvdW50JywgU3RyaW5nKGNvdW50KSk7XG4gICAgICAgICAgICBoZWFkZXJzLmFwcGVuZCgnWC1GaWx0ZXInLCBwcmVkaWNhdGUpO1xuICAgICAgICAgICAgaGVhZGVycy5hcHBlbmQoJ1gtU29ydC1CeScsIHNvcnRCeSB8fCAnJyk7XG4gICAgICAgICAgICBoZWFkZXJzLmFwcGVuZCgnWC1Tb3J0LUJ5LURpcmVjdGlvbicsIHNvcnRCeURpcmVjdGlvbiB8fCAnJyk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHdpbmRvdy5mZXRjaChyZXBvLmNvbGxlY3Rpb25FbmRwb2ludCwgeyBoZWFkZXJzLCBzaWduYWw6IGFib3J0aW9uLnNpZ25hbCB9KTtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICBpdGVtcyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVycm9yID0gbmV3IEVycm9yKGBIaWJhIGzDqXBldHQgZmVsIGFkYXRvayBsZWvDqXJkZXrDqXNlIGvDtnpiZW46ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGFib3J0aW9uLnN1YnNjcmlwdGlvbi5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpdGVtcykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2hvdWxkIG5ldmVyIGhhcHBlbicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCA+PSBpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogPFREYXRhPjx1bmtub3duPnVuZGVmaW5lZCB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSBpdGVtc1tpbmRleF07XG4gICAgICAgICsraW5kZXg7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgY2FuY2VsKCkge1xuICAgICAgICAgIC8vRklYTUU6IGltcGxlbWVudFxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBSZXN0UXVlcnk8VD4gZXh0ZW5kcyBRdWVyeTxUPiB7XG4gIHN0YXRpYyBkZWZhdWx0Q291bnQgPSAxMDAwMDBcbiAgcmVhZG9ubHkgcmVwbzogUmVzdFJlcG9zaXRvcnk8VD5cbiAgcmVhZG9ubHkgb2Zmc2V0OiBudW1iZXJcbiAgcmVhZG9ubHkgY291bnQ6IG51bWJlclxuICByZWFkb25seSBwcmVkaWNhdGU6IFEuTGFtYmRhfG51bGxcbiAgcmVhZG9ubHkgc29ydEJ5OiBzdHJpbmdcbiAgcmVhZG9ubHkgc29ydEJ5RGlyZWN0aW9uOiBRdWVyeVNvcnREaXJlY3Rpb25cbiAgY29uc3RydWN0b3IgKHJlcG86IFJlc3RSZXBvc2l0b3J5PFQ+LCBvZmZzZXQ6IG51bWJlciwgY291bnQ6IG51bWJlciwgcHJlZGljYXRlPzogUS5MYW1iZGF8bnVsbCwgc29ydEJ5Pzogc3RyaW5nLCBzb3J0QnlEaXJlY3Rpb24/OiBRdWVyeVNvcnREaXJlY3Rpb24pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucmVwbyA9IHJlcG87XG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgICB0aGlzLmNvdW50ID0gMCA9PT0gY291bnQgPyBjb3VudCA6IChjb3VudCB8fCBSZXN0UXVlcnkuZGVmYXVsdENvdW50KTtcbiAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZSB8fCBudWxsO1xuICAgIHRoaXMuc29ydEJ5ID0gc29ydEJ5IHx8ICcnO1xuICAgIHRoaXMuc29ydEJ5RGlyZWN0aW9uID0gc29ydEJ5RGlyZWN0aW9uIHx8IFF1ZXJ5U29ydERpcmVjdGlvbi5Bc2M7XG4gIH1cbiAgcHJpdmF0ZSBlc2NhcGUgKGlucHV0OiBzdHJpbmd8US5FeHByfG51bGwpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNvbnN0IGlucCA9IGlucHV0IGluc3RhbmNlb2YgUS5FeHByID8gaW5wdXQudG9TdHJpbmcoKSA6IGlucHV0O1xuICAgIC8vIHJldHVybiB3aW5kb3cudXRmOC5lbmNvZGUoaW5wKS5yZXBsYWNlKHJlZ2V4LCBtID0+ICclJyArICgnMCcgKyBtLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpLnNsaWNlKC0yKSk7XG4gICAgcmV0dXJuIGlucDtcbiAgfVxuICBnZXQgZXNjYXBlZFByZWRpY2F0ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXNjYXBlKHRoaXMucHJlZGljYXRlKTtcbiAgfVxuICBnZXQgZXNjYXBlZFNvcnRCeSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXNjYXBlKHRoaXMuc29ydEJ5KTtcbiAgfVxuICBmaWx0ZXIgKHByZWRpY2F0ZTogc3RyaW5nfFEuTGFtYmRhKTogUXVlcnk8VD4ge1xuICAgIGNvbnN0IHAgPSAnc3RyaW5nJyA9PT0gdHlwZW9mIHByZWRpY2F0ZSA/IFEucGFyc2UocHJlZGljYXRlKSA6IHByZWRpY2F0ZTtcbiAgICBpZiAoIShwIGluc3RhbmNlb2YgUS5MYW1iZGEpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBtdXN0IGJlIGEgbGFtYmRhIGV4cHJlc3Npb24nKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSZXN0UXVlcnk8VD4oXG4gICAgICB0aGlzLnJlcG8sXG4gICAgICB0aGlzLm9mZnNldCxcbiAgICAgIHRoaXMuY291bnQsXG4gICAgICB0aGlzLnByZWRpY2F0ZSA/IHRoaXMucHJlZGljYXRlLmFuZChwKSA6IHAsXG4gICAgICB0aGlzLnNvcnRCeSxcbiAgICAgIHRoaXMuc29ydEJ5RGlyZWN0aW9uXG4gICAgKTtcbiAgfVxuICBza2lwKG46IG51bWJlcik6IFF1ZXJ5PFQ+IHtcbiAgICBpZiAoMCA9PT0gbikge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGNoZWNrTnVtKG4sICdza2lwIHBhcmFtZXRlciBtdXN0IGJlIG5vbi1uZWdhdGl2ZSB3aG9sZSBudW1iZXIuJyk7XG4gICAgcmV0dXJuIG5ldyBSZXN0UXVlcnk8VD4oXG4gICAgICB0aGlzLnJlcG8sXG4gICAgICBuLCAvLyBUT0RPOiBFenQgdsOpZ2lnIGtlbGwgZ29uZG9sbmksIG1lcnQgbGVoZXQgKHRoaXMub2Zmc2V0ICsgbikga2VsbGVuZSBpZGU/XG4gICAgICB0aGlzLmNvdW50LFxuICAgICAgdGhpcy5wcmVkaWNhdGUsXG4gICAgICB0aGlzLnNvcnRCeSxcbiAgICAgIHRoaXMuc29ydEJ5RGlyZWN0aW9uLFxuICAgICk7XG4gIH1cbiAgdGFrZShuOiBudW1iZXIpOiBRdWVyeTxUPiB7XG4gICAgY2hlY2tOdW0obiwgJ3Rha2UgcGFyYW1ldGVyIG11c3QgYmUgbm9uLW5lZ2F0aXZlIHdob2xlIG51bWJlci4nKTtcbiAgICByZXR1cm4gbmV3IFJlc3RRdWVyeTxUPihcbiAgICAgIHRoaXMucmVwbyxcbiAgICAgIHRoaXMub2Zmc2V0LFxuICAgICAgbixcbiAgICAgIHRoaXMucHJlZGljYXRlLFxuICAgICAgdGhpcy5zb3J0QnksXG4gICAgICB0aGlzLnNvcnRCeURpcmVjdGlvbik7XG4gIH1cbiAgb3JkZXJCeShzZWxlY3Rvcjogc3RyaW5nLCBkaXJlY3Rpb24/OiBRdWVyeVNvcnREaXJlY3Rpb24pOiBRdWVyeTxUPiB7XG4gICAgcmV0dXJuIG5ldyBSZXN0UXVlcnk8VD4oXG4gICAgICB0aGlzLnJlcG8sXG4gICAgICB0aGlzLm9mZnNldCxcbiAgICAgIHRoaXMuY291bnQsXG4gICAgICB0aGlzLnByZWRpY2F0ZSxcbiAgICAgIHNlbGVjdG9yLFxuICAgICAgZGlyZWN0aW9uIHx8IFF1ZXJ5U29ydERpcmVjdGlvbi5Bc2MpO1xuICB9XG4gIGFzeW5jIHRvdGFsKGNhbmNlbGxhdGlvbjogQ2FuY2VsbGF0aW9uKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICByZXR1cm4gdGhpcy5yZXBvLnRvdGFsKHRoaXMuZXNjYXBlZFByZWRpY2F0ZSwgY2FuY2VsbGF0aW9uKTtcbiAgfVxuICBleGVjKCk6IENhbmNlbGxhYmxlQXN5bmNJdGVyYXRvcjxUPiB7XG4gICAgcmV0dXJuIHRoaXMucmVwby5leGVjKHRoaXMub2Zmc2V0LCB0aGlzLmNvdW50LCB0aGlzLmVzY2FwZWRQcmVkaWNhdGUsIHRoaXMuc29ydEJ5LCB0aGlzLnNvcnRCeURpcmVjdGlvbik7XG4gIH1cbn07Il19
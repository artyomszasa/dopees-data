export var BinaryOperation;
(function (BinaryOperation) {
    BinaryOperation["EQ"] = "eq";
    BinaryOperation["NEQ"] = "neq";
    BinaryOperation["GT"] = "gt";
    BinaryOperation["LT"] = "lt";
    BinaryOperation["GE"] = "ge";
    BinaryOperation["LE"] = "le";
    BinaryOperation["OR"] = "or";
    BinaryOperation["AND"] = "and";
    BinaryOperation["MUL"] = "mul";
    BinaryOperation["DIV"] = "div";
    BinaryOperation["MOD"] = "mod";
    BinaryOperation["ADD"] = "add";
    BinaryOperation["SUB"] = "sub";
})(BinaryOperation || (BinaryOperation = {}));
export var UnaryOperation;
(function (UnaryOperation) {
    UnaryOperation["NOT"] = "not";
    UnaryOperation["NEG"] = "neg";
    UnaryOperation["IS_NULL"] = "null";
})(UnaryOperation || (UnaryOperation = {}));
export class ConvertVisitor {
    visitConst(expr) {
        return expr;
    }
    visitProp(expr) {
        return new Prop(expr.instance.accept(this), expr.name);
    }
    visitParam(expr) {
        return expr;
    }
    visitBinary(expr) {
        return new BinOp(expr.left.accept(this), expr.op, expr.right.accept(this));
    }
    visitUnary(expr) {
        return new UnOp(expr.op, expr.operand.accept(this));
    }
    visitCall(expr) {
        return new Call(expr.name, expr.args.map(e => e.accept(this)));
    }
    visitLambda(expr) {
        return new Lambda(expr.body.accept(this), expr.param);
    }
}
const emptyContext = () => {
    const keys = [];
    const names = [];
    let next = 0;
    return {
        symbolToString(symbol) {
            const index = keys.indexOf(symbol);
            if (-1 !== index) {
                return names[index];
            }
            const name = `e${++next}`;
            keys.push(symbol);
            names.push(name);
            return name;
        }
    };
};
export class Expr {
}
export class Const extends Expr {
    constructor(value) {
        super();
        this.value = value;
    }
    accept(visitor) { return visitor.visitConst(this); }
    eq(other) { return other instanceof Const && other.value === this.value; }
    toString() { return JSON.stringify(this.value); }
}
export class Prop extends Expr {
    constructor(instance, name) {
        super();
        this.instance = instance;
        this.name = name;
    }
    accept(visitor) { return visitor.visitProp(this); }
    eq(other) { return other instanceof Prop && other.instance.eq(this.instance) && other.name === this.name; }
    toString(context) {
        const ctx = context || emptyContext();
        return `${this.instance.toString(ctx)}.${this.name}`;
    }
}
export class Param extends Expr {
    constructor(name) {
        super();
        this.name = name;
    }
    accept(visitor) { return visitor.visitParam(this); }
    eq(other) { return other instanceof Param && other.name === this.name; }
    toString(context) {
        const ctx = context || emptyContext();
        return ctx.symbolToString(this.name);
    }
}
export class BinOp extends Expr {
    constructor(left, op, right) {
        super();
        this.left = left;
        this.op = op;
        this.right = right;
    }
    static unwind(head, tail) {
        if (!tail || !tail.length) {
            return head;
        }
        return tail.reduce((left, vals) => {
            const op = vals[1];
            const right = vals[3];
            return new BinOp(left, op, right);
        }, head);
    }
    accept(visitor) { return visitor.visitBinary(this); }
    eq(other) {
        return other instanceof BinOp && other.op === this.op && other.left.eq(this.left) && other.right.eq(this.right);
    }
    toString(context) {
        const ctx = context || emptyContext();
        return `(${this.left.toString(ctx)} ${BinOp.binOpStrings[this.op]} ${this.right.toString(ctx)})`;
    }
}
BinOp.binOpStrings = {
    [BinaryOperation.EQ]: '=',
    [BinaryOperation.NEQ]: '!=',
    [BinaryOperation.GT]: '>',
    [BinaryOperation.LT]: '<',
    [BinaryOperation.LE]: '>=',
    [BinaryOperation.GE]: '<=',
    [BinaryOperation.OR]: '||',
    [BinaryOperation.AND]: '&&',
    [BinaryOperation.MUL]: '*',
    [BinaryOperation.DIV]: '/',
    [BinaryOperation.MOD]: '%',
    [BinaryOperation.ADD]: '+',
    [BinaryOperation.SUB]: '-'
};
export class UnOp extends Expr {
    constructor(op, operand) {
        super();
        this.op = op;
        this.operand = operand;
    }
    accept(visitor) { return visitor.visitUnary(this); }
    eq(other) {
        return other instanceof UnOp && other.op === this.op && other.operand.eq(this.operand);
    }
    toString(context) {
        const ctx = context || emptyContext();
        if (this.op === UnaryOperation.NOT) {
            return `!(${this.operand.toString(ctx)})`;
        }
        return `${UnOp.unOpStrings[this.op]}(${this.operand.toString(ctx)})`;
    }
}
UnOp.unOpStrings = {
    [UnaryOperation.NOT]: 'not',
    [UnaryOperation.NEG]: 'neg',
    [UnaryOperation.IS_NULL]: 'isNull'
};
export class Call extends Expr {
    constructor(name, args) {
        super();
        if (Call.knownFunctions[name]) {
            const argCount = Call.knownFunctions[name];
            if ('number' === typeof argCount) {
                if (argCount !== args.length) {
                    throw new Error(`invalid argument count for ${name}: ${args.length}, accepted argument count: ${argCount}`);
                }
            }
            else {
                if (-1 === argCount.indexOf(args.length)) {
                    throw new Error(`invalid argument count for ${name}: ${args.length}, accepted argument counts: ${argCount.join(',')}`);
                }
            }
        }
        this.name = name;
        this.args = args;
    }
    accept(visitor) { return visitor.visitCall(this); }
    eq(other) {
        if (!(other instanceof Call)) {
            return false;
        }
        if (other.name !== this.name) {
            return false;
        }
        if (other.args.length !== this.args.length) {
            return false;
        }
        for (let i = 0; i < other.args.length; i = i + 1) {
            if (!other.args[i].eq(this.args[i])) {
                return false;
            }
        }
        return true;
    }
    toString(context) {
        const ctx = context || emptyContext();
        return `${this.name}(${this.args.map(arg => arg.toString(ctx)).join(',')})`;
    }
}
Call.knownFunctions = {
    contains: 2,
    substring: [2, 3]
};
export class Lambda extends Expr {
    constructor(body, param) {
        super();
        this.body = body;
        this.param = param;
    }
    accept(visitor) { return visitor.visitLambda(this); }
    eq(other) {
        if (!(other instanceof Lambda)) {
            return false;
        }
        throw new Error('Lambda equality is not implemented!');
    }
    toString(context) {
        const ctx = context || emptyContext();
        return `${this.param.toString(ctx)} => ${this.body.toString(ctx)}`;
    }
    substituteParameter(target) {
        return new Lambda(substituteParameter(this.param, target, this.body), target);
    }
    and(other) {
        if (this.param.eq(other.param)) {
            return new Lambda(new BinOp(this.body, BinaryOperation.AND, other.body), this.param);
        }
        return new Lambda(new BinOp(this.body, BinaryOperation.AND, other.substituteParameter(this.param).body), this.param);
    }
}
// export function parse (raw : string) : Expr {
//   return parser.parse(raw);
// }
export function substituteParameter(source, target, expression) {
    const visitor = new class extends ConvertVisitor {
        visitParam(p) { return p.eq(source) ? target : p; }
    };
    return expression.accept(visitor);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQU4sSUFBWSxlQWNYO0FBZEQsV0FBWSxlQUFlO0lBQ3pCLDRCQUFTLENBQUE7SUFDVCw4QkFBVyxDQUFBO0lBQ1gsNEJBQVMsQ0FBQTtJQUNULDRCQUFTLENBQUE7SUFDVCw0QkFBUyxDQUFBO0lBQ1QsNEJBQVMsQ0FBQTtJQUNULDRCQUFTLENBQUE7SUFDVCw4QkFBVyxDQUFBO0lBQ1gsOEJBQVcsQ0FBQTtJQUNYLDhCQUFXLENBQUE7SUFDWCw4QkFBVyxDQUFBO0lBQ1gsOEJBQVcsQ0FBQTtJQUNYLDhCQUFXLENBQUE7QUFDYixDQUFDLEVBZFcsZUFBZSxLQUFmLGVBQWUsUUFjMUI7QUFFRCxNQUFNLENBQU4sSUFBWSxjQUlYO0FBSkQsV0FBWSxjQUFjO0lBQ3hCLDZCQUFXLENBQUE7SUFDWCw2QkFBVyxDQUFBO0lBQ1gsa0NBQWdCLENBQUE7QUFDbEIsQ0FBQyxFQUpXLGNBQWMsS0FBZCxjQUFjLFFBSXpCO0FBWUQsTUFBTSxPQUFPLGNBQWM7SUFDekIsVUFBVSxDQUFDLElBQVc7UUFDbEIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUNELFNBQVMsQ0FBQyxJQUFVO1FBQ2hCLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFDRCxVQUFVLENBQUMsSUFBVztRQUNsQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ0QsV0FBVyxDQUFDLElBQVc7UUFDbkIsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFD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QUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUIsT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN4RjtRQUNELE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pILENBQUM7Q0FDRjtBQUVELGdEQUFnRDtBQUNoRCw4QkFBOEI7QUFDOUIsSUFBSTtBQUVKLE1BQU0sVUFBVSxtQkFBbUIsQ0FBRSxNQUFhLEVBQUUsTUFBYSxFQUFFLFVBQWdCO0lBQ2pGLE1BQU0sT0FBTyxHQUFHLElBQUksS0FBTSxTQUFRLGNBQWM7UUFDNUMsVUFBVSxDQUFDLENBQVEsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM3RCxDQUFBO0lBQ0QsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBCaW5hcnlPcGVyYXRpb24ge1xuICBFUSA9ICdlcScsXG4gIE5FUSA9ICduZXEnLFxuICBHVCA9ICdndCcsXG4gIExUID0gJ2x0JyxcbiAgR0UgPSAnZ2UnLFxuICBMRSA9ICdsZScsXG4gIE9SID0gJ29yJyxcbiAgQU5EID0gJ2FuZCcsXG4gIE1VTCA9ICdtdWwnLFxuICBESVYgPSAnZGl2JyxcbiAgTU9EID0gJ21vZCcsXG4gIEFERCA9ICdhZGQnLFxuICBTVUIgPSAnc3ViJ1xufVxuXG5leHBvcnQgZW51bSBVbmFyeU9wZXJhdGlvbiB7XG4gIE5PVCA9ICdub3QnLFxuICBORUcgPSAnbmVnJyxcbiAgSVNfTlVMTCA9ICdudWxsJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4cHJWaXNpdG9yPFQ+IHtcbiAgdmlzaXRDb25zdChleHByOiBDb25zdCk6IFRcbiAgdmlzaXRQcm9wKGV4cHI6IFByb3ApIDogVFxuICB2aXNpdFBhcmFtKGV4cHI6IFBhcmFtKSA6IFRcbiAgdmlzaXRCaW5hcnkoZXhwcjogQmluT3ApIDogVFxuICB2aXNpdFVuYXJ5KGV4cHI6IFVuT3ApIDogVFxuICB2aXNpdENhbGwoZXhwcjogQ2FsbCkgOiBUXG4gIHZpc2l0TGFtYmRhKGV4cHI6IExhbWJkYSkgOiBUXG59XG5cbmV4cG9ydCBjbGFzcyBDb252ZXJ0VmlzaXRvciBpbXBsZW1lbnRzIEV4cHJWaXNpdG9yPEV4cHI+IHtcbiAgdmlzaXRDb25zdChleHByOiBDb25zdCk6IEV4cHIge1xuICAgICAgcmV0dXJuIGV4cHI7XG4gIH1cbiAgdmlzaXRQcm9wKGV4cHI6IFByb3ApOiBFeHByIHtcbiAgICAgIHJldHVybiBuZXcgUHJvcChleHByLmluc3RhbmNlLmFjY2VwdCh0aGlzKSwgZXhwci5uYW1lKTtcbiAgfVxuICB2aXNpdFBhcmFtKGV4cHI6IFBhcmFtKTogRXhwciB7XG4gICAgICByZXR1cm4gZXhwcjtcbiAgfVxuICB2aXNpdEJpbmFyeShleHByOiBCaW5PcCk6IEV4cHIge1xuICAgICAgcmV0dXJuIG5ldyBCaW5PcChleHByLmxlZnQuYWNjZXB0KHRoaXMpLCBleHByLm9wLCBleHByLnJpZ2h0LmFjY2VwdCh0aGlzKSk7XG4gIH1cbiAgdmlzaXRVbmFyeShleHByOiBVbk9wKTogRXhwciB7XG4gICAgICByZXR1cm4gbmV3IFVuT3AoZXhwci5vcCwgZXhwci5vcGVyYW5kLmFjY2VwdCh0aGlzKSk7XG4gIH1cbiAgdmlzaXRDYWxsKGV4cHI6IENhbGwpOiBFeHByIHtcbiAgICAgIHJldHVybiBuZXcgQ2FsbChleHByLm5hbWUsIGV4cHIuYXJncy5tYXAoZSA9PiBlLmFjY2VwdCh0aGlzKSkpO1xuICB9XG4gIHZpc2l0TGFtYmRhKGV4cHI6IExhbWJkYSk6IEV4cHIge1xuICAgICAgcmV0dXJuIG5ldyBMYW1iZGEoZXhwci5ib2R5LmFjY2VwdCh0aGlzKSwgZXhwci5wYXJhbSk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb1N0cmluZ0NvbnRleHQge1xuICBzeW1ib2xUb1N0cmluZyhzeW1ib2w6IFN5bWJvbCk6IHN0cmluZztcbn1cblxuY29uc3QgZW1wdHlDb250ZXh0ID0gKCk6IFRvU3RyaW5nQ29udGV4dCA9PiB7XG4gIGNvbnN0IGtleXM6IFN5bWJvbFtdID0gW107XG4gIGNvbnN0IG5hbWVzOiBzdHJpbmdbXSA9IFtdO1xuICBsZXQgbmV4dCA9IDA7XG4gIHJldHVybiB7XG4gICAgc3ltYm9sVG9TdHJpbmcoc3ltYm9sOiBTeW1ib2wpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0ga2V5cy5pbmRleE9mKHN5bWJvbCk7XG4gICAgICBpZiAoLTEgIT09IGluZGV4KSB7XG4gICAgICAgIHJldHVybiBuYW1lc1tpbmRleF07XG4gICAgICB9XG4gICAgICBjb25zdCBuYW1lID0gYGUkeysrbmV4dH1gO1xuICAgICAga2V5cy5wdXNoKHN5bWJvbCk7XG4gICAgICBuYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICB9O1xufVxuXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFeHByIHtcbiAgYWJzdHJhY3QgYWNjZXB0PFQ+KHZpc2l0b3IgOiBFeHByVmlzaXRvcjxUPikgOiBUXG4gIGFic3RyYWN0IGVxKG90aGVyIDogRXhwcikgOiBib29sZWFuXG4gIGFic3RyYWN0IHRvU3RyaW5nKGNvbnRleHQ/OiBUb1N0cmluZ0NvbnRleHQpOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBDb25zdCBleHRlbmRzIEV4cHIge1xuICB2YWx1ZSA6IHN0cmluZ3xudWxsXG4gIGNvbnN0cnVjdG9yKHZhbHVlIDogc3RyaW5nfG51bGwpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgYWNjZXB0PFQ+KHZpc2l0b3IgOiBFeHByVmlzaXRvcjxUPikgeyByZXR1cm4gdmlzaXRvci52aXNpdENvbnN0KHRoaXMpOyB9XG4gIGVxKG90aGVyIDogRXhwcikgOiBib29sZWFuIHsgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgQ29uc3QgJiYgb3RoZXIudmFsdWUgPT09IHRoaXMudmFsdWU7IH1cbiAgdG9TdHJpbmcoKSB7IHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnZhbHVlKTsgfVxufVxuXG5leHBvcnQgY2xhc3MgUHJvcCBleHRlbmRzIEV4cHIge1xuICBpbnN0YW5jZTogRXhwclxuICBuYW1lOiBzdHJpbmdcbiAgY29uc3RydWN0b3IoaW5zdGFuY2UgOiBFeHByLCBuYW1lIDogc3RyaW5nKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgfVxuICBhY2NlcHQ8VD4odmlzaXRvciA6IEV4cHJWaXNpdG9yPFQ+KSB7IHJldHVybiB2aXNpdG9yLnZpc2l0UHJvcCh0aGlzKTsgfVxuICBlcShvdGhlciA6IEV4cHIpIDogYm9vbGVhbiB7IHJldHVybiBvdGhlciBpbnN0YW5jZW9mIFByb3AgJiYgb3RoZXIuaW5zdGFuY2UuZXEodGhpcy5pbnN0YW5jZSkgJiYgb3RoZXIubmFtZSA9PT0gdGhpcy5uYW1lOyB9XG4gIHRvU3RyaW5nKGNvbnRleHQ/OiBUb1N0cmluZ0NvbnRleHQpIHtcbiAgICBjb25zdCBjdHggPSBjb250ZXh0IHx8IGVtcHR5Q29udGV4dCgpO1xuICAgIHJldHVybiBgJHt0aGlzLmluc3RhbmNlLnRvU3RyaW5nKGN0eCl9LiR7dGhpcy5uYW1lfWA7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBhcmFtIGV4dGVuZHMgRXhwciB7XG4gIG5hbWUgOiBTeW1ib2xcbiAgY29uc3RydWN0b3IobmFtZSA6IFN5bWJvbCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gIH1cbiAgYWNjZXB0PFQ+KHZpc2l0b3IgOiBFeHByVmlzaXRvcjxUPikgeyByZXR1cm4gdmlzaXRvci52aXNpdFBhcmFtKHRoaXMpOyB9XG4gIGVxKG90aGVyIDogRXhwcikgOiBib29sZWFuIHsgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgUGFyYW0gJiYgb3RoZXIubmFtZSA9PT0gdGhpcy5uYW1lOyB9XG4gIHRvU3RyaW5nKGNvbnRleHQ/OiBUb1N0cmluZ0NvbnRleHQpIHtcbiAgICBjb25zdCBjdHggPSBjb250ZXh0IHx8IGVtcHR5Q29udGV4dCgpO1xuICAgIHJldHVybiBjdHguc3ltYm9sVG9TdHJpbmcodGhpcy5uYW1lKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmluT3AgZXh0ZW5kcyBFeHByIHtcbiAgcHJpdmF0ZSBzdGF0aWMgYmluT3BTdHJpbmdzID0ge1xuICAgICAgW0JpbmFyeU9wZXJhdGlvbi5FUV06ICc9JyxcbiAgICAgIFtCaW5hcnlPcGVyYXRpb24uTkVRXTogJyE9JyxcbiAgICAgIFtCaW5hcnlPcGVyYXRpb24uR1RdOiAnPicsXG4gICAgICBbQmluYXJ5T3BlcmF0aW9uLkxUXTogJzwnLFxuICAgICAgW0JpbmFyeU9wZXJhdGlvbi5MRV06ICc+PScsXG4gICAgICBbQmluYXJ5T3BlcmF0aW9uLkdFXTogJzw9JyxcbiAgICAgIFtCaW5hcnlPcGVyYXRpb24uT1JdOiAnfHwnLFxuICAgICAgW0JpbmFyeU9wZXJhdGlvbi5BTkRdOiAnJiYnLFxuICAgICAgW0JpbmFyeU9wZXJhdGlvbi5NVUxdOiAnKicsXG4gICAgICBbQmluYXJ5T3BlcmF0aW9uLkRJVl06ICcvJyxcbiAgICAgIFtCaW5hcnlPcGVyYXRpb24uTU9EXTogJyUnLFxuICAgICAgW0JpbmFyeU9wZXJhdGlvbi5BRERdOiAnKycsXG4gICAgICBbQmluYXJ5T3BlcmF0aW9uLlNVQl06ICctJ1xuICB9XG4gIHN0YXRpYyB1bndpbmQgKGhlYWQgOiBFeHByLCB0YWlsIDogQXJyYXk8W2FueSwgc3RyaW5nLCBhbnksIEV4cHJdPikge1xuICAgIGlmICghdGFpbCB8fCAhdGFpbC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBoZWFkO1xuICAgIH1cbiAgICByZXR1cm4gdGFpbC5yZWR1Y2UoKGxlZnQsIHZhbHMpID0+IHtcbiAgICAgIGNvbnN0IG9wID0gdmFsc1sxXTtcbiAgICAgIGNvbnN0IHJpZ2h0ID0gdmFsc1szXTtcbiAgICAgIHJldHVybiBuZXcgQmluT3AobGVmdCwgPEJpbmFyeU9wZXJhdGlvbj5vcCwgcmlnaHQpO1xuICAgIH0sIGhlYWQpO1xuICB9XG4gIGxlZnQgOiBFeHByXG4gIG9wIDogQmluYXJ5T3BlcmF0aW9uXG4gIHJpZ2h0IDogRXhwclxuICBjb25zdHJ1Y3RvciAobGVmdCA6IEV4cHIsIG9wIDogQmluYXJ5T3BlcmF0aW9uLCByaWdodCA6IEV4cHIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgdGhpcy5vcCA9IG9wO1xuICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgfVxuICBhY2NlcHQ8VD4odmlzaXRvciA6IEV4cHJWaXNpdG9yPFQ+KSB7IHJldHVybiB2aXNpdG9yLnZpc2l0QmluYXJ5KHRoaXMpOyB9XG4gIGVxKG90aGVyIDogRXhwcikgOiBib29sZWFuIHtcbiAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBCaW5PcCAmJiBvdGhlci5vcCA9PT0gdGhpcy5vcCAmJiBvdGhlci5sZWZ0LmVxKHRoaXMubGVmdCkgJiYgb3RoZXIucmlnaHQuZXEodGhpcy5yaWdodCk7XG4gIH1cbiAgdG9TdHJpbmcoY29udGV4dD86IFRvU3RyaW5nQ29udGV4dCkge1xuICAgIGNvbnN0IGN0eCA9IGNvbnRleHQgfHwgZW1wdHlDb250ZXh0KCk7XG4gICAgcmV0dXJuIGAoJHt0aGlzLmxlZnQudG9TdHJpbmcoY3R4KX0gJHtCaW5PcC5iaW5PcFN0cmluZ3NbdGhpcy5vcF19ICR7dGhpcy5yaWdodC50b1N0cmluZyhjdHgpfSlgO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVbk9wIGV4dGVuZHMgRXhwciB7XG4gIHByaXZhdGUgc3RhdGljIHVuT3BTdHJpbmdzID0ge1xuICAgICAgW1VuYXJ5T3BlcmF0aW9uLk5PVF06ICdub3QnLFxuICAgICAgW1VuYXJ5T3BlcmF0aW9uLk5FR106ICduZWcnLFxuICAgICAgW1VuYXJ5T3BlcmF0aW9uLklTX05VTExdOiAnaXNOdWxsJ1xuICB9XG4gIG9wOiBVbmFyeU9wZXJhdGlvblxuICBvcGVyYW5kOiBFeHByXG4gIGNvbnN0cnVjdG9yKG9wIDogVW5hcnlPcGVyYXRpb24sIG9wZXJhbmQ6IEV4cHIpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLm9wID0gb3A7XG4gICAgICB0aGlzLm9wZXJhbmQgPSBvcGVyYW5kO1xuICB9XG4gIGFjY2VwdDxUPih2aXNpdG9yIDogRXhwclZpc2l0b3I8VD4pIHsgcmV0dXJuIHZpc2l0b3IudmlzaXRVbmFyeSh0aGlzKTsgfVxuICBlcShvdGhlciA6IEV4cHIpIDogYm9vbGVhbiB7XG4gICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgVW5PcCAmJiBvdGhlci5vcCA9PT0gdGhpcy5vcCAmJiBvdGhlci5vcGVyYW5kLmVxKHRoaXMub3BlcmFuZCk7XG4gIH1cbiAgdG9TdHJpbmcoY29udGV4dD86IFRvU3RyaW5nQ29udGV4dCkge1xuICAgIGNvbnN0IGN0eCA9IGNvbnRleHQgfHwgZW1wdHlDb250ZXh0KCk7XG4gICAgaWYgKHRoaXMub3AgPT09IFVuYXJ5T3BlcmF0aW9uLk5PVCkge1xuICAgICAgcmV0dXJuIGAhKCR7dGhpcy5vcGVyYW5kLnRvU3RyaW5nKGN0eCl9KWA7XG4gICAgfVxuICAgIHJldHVybiBgJHtVbk9wLnVuT3BTdHJpbmdzW3RoaXMub3BdfSgke3RoaXMub3BlcmFuZC50b1N0cmluZyhjdHgpfSlgO1xuICB9XG59XG5cbmludGVyZmFjZSBLbm93bkZ1bmN0aW9uQ2FsbHMge1xuICBbbmFtZSA6IHN0cmluZ10gOiBBcnJheTxudW1iZXI+IHwgbnVtYmVyXG59XG5cbmV4cG9ydCBjbGFzcyBDYWxsIGV4dGVuZHMgRXhwciB7XG4gIHN0YXRpYyBrbm93bkZ1bmN0aW9uczogS25vd25GdW5jdGlvbkNhbGxzID0ge1xuICAgICAgY29udGFpbnM6IDIsXG4gICAgICBzdWJzdHJpbmc6IFsyLCAzXVxuICB9XG4gIG5hbWU6IHN0cmluZ1xuICBhcmdzOiBBcnJheTxFeHByPlxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIGFyZ3MgOiBBcnJheTxFeHByPikge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIGlmIChDYWxsLmtub3duRnVuY3Rpb25zW25hbWVdKSB7XG4gICAgICAgICAgY29uc3QgYXJnQ291bnQgPSBDYWxsLmtub3duRnVuY3Rpb25zW25hbWVdO1xuICAgICAgICAgIGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIGFyZ0NvdW50KSB7XG4gICAgICAgICAgICAgIGlmIChhcmdDb3VudCAhPT0gYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBhcmd1bWVudCBjb3VudCBmb3IgJHtuYW1lfTogJHthcmdzLmxlbmd0aH0sIGFjY2VwdGVkIGFyZ3VtZW50IGNvdW50OiAke2FyZ0NvdW50fWApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKC0xID09PSBhcmdDb3VudC5pbmRleE9mKGFyZ3MubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGFyZ3VtZW50IGNvdW50IGZvciAke25hbWV9OiAke2FyZ3MubGVuZ3RofSwgYWNjZXB0ZWQgYXJndW1lbnQgY291bnRzOiAke2FyZ0NvdW50LmpvaW4oJywnKX1gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICB9XG4gIGFjY2VwdDxUPih2aXNpdG9yOiBFeHByVmlzaXRvcjxUPikgeyByZXR1cm4gdmlzaXRvci52aXNpdENhbGwodGhpcyk7IH1cbiAgZXEob3RoZXI6IEV4cHIpIHtcbiAgICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgQ2FsbCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAob3RoZXIubmFtZSAhPT0gdGhpcy5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG90aGVyLmFyZ3MubGVuZ3RoICE9PSB0aGlzLmFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdGhlci5hcmdzLmxlbmd0aDsgaSA9IGkgKyAxKSB7XG4gICAgICAgICAgaWYgKCFvdGhlci5hcmdzW2ldLmVxKHRoaXMuYXJnc1tpXSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHRvU3RyaW5nKGNvbnRleHQ/OiBUb1N0cmluZ0NvbnRleHQpIHtcbiAgICBjb25zdCBjdHggPSBjb250ZXh0IHx8IGVtcHR5Q29udGV4dCgpO1xuICAgIHJldHVybiBgJHt0aGlzLm5hbWV9KCR7dGhpcy5hcmdzLm1hcChhcmcgPT4gYXJnLnRvU3RyaW5nKGN0eCkpLmpvaW4oJywnKX0pYDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTGFtYmRhIGV4dGVuZHMgRXhwciB7XG4gIGJvZHk6IEV4cHJcbiAgcGFyYW06IFBhcmFtXG4gIGNvbnN0cnVjdG9yKGJvZHk6IEV4cHIsIHBhcmFtOiBQYXJhbSkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgICB0aGlzLnBhcmFtID0gcGFyYW07XG4gIH1cbiAgYWNjZXB0PFQ+KHZpc2l0b3I6IEV4cHJWaXNpdG9yPFQ+KSB7IHJldHVybiB2aXNpdG9yLnZpc2l0TGFtYmRhKHRoaXMpOyB9XG4gIGVxKG90aGVyOiBFeHByKSB7XG4gICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIExhbWJkYSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xhbWJkYSBlcXVhbGl0eSBpcyBub3QgaW1wbGVtZW50ZWQhJyk7XG4gIH1cbiAgdG9TdHJpbmcoY29udGV4dD86IFRvU3RyaW5nQ29udGV4dCkge1xuICAgIGNvbnN0IGN0eCA9IGNvbnRleHQgfHwgZW1wdHlDb250ZXh0KCk7XG4gICAgcmV0dXJuIGAke3RoaXMucGFyYW0udG9TdHJpbmcoY3R4KX0gPT4gJHt0aGlzLmJvZHkudG9TdHJpbmcoY3R4KX1gO1xuICB9XG4gIHN1YnN0aXR1dGVQYXJhbWV0ZXIodGFyZ2V0OiBQYXJhbSkge1xuICAgICAgcmV0dXJuIG5ldyBMYW1iZGEoc3Vic3RpdHV0ZVBhcmFtZXRlcih0aGlzLnBhcmFtLCB0YXJnZXQsIHRoaXMuYm9keSksIHRhcmdldCk7XG4gIH1cbiAgYW5kKG90aGVyOiBMYW1iZGEpIHtcbiAgICAgIGlmICh0aGlzLnBhcmFtLmVxKG90aGVyLnBhcmFtKSkge1xuICAgICAgICAgIHJldHVybiBuZXcgTGFtYmRhKG5ldyBCaW5PcCh0aGlzLmJvZHksIEJpbmFyeU9wZXJhdGlvbi5BTkQsIG90aGVyLmJvZHkpLCB0aGlzLnBhcmFtKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTGFtYmRhKG5ldyBCaW5PcCh0aGlzLmJvZHksIEJpbmFyeU9wZXJhdGlvbi5BTkQsIG90aGVyLnN1YnN0aXR1dGVQYXJhbWV0ZXIodGhpcy5wYXJhbSkuYm9keSksIHRoaXMucGFyYW0pO1xuICB9XG59XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBwYXJzZSAocmF3IDogc3RyaW5nKSA6IEV4cHIge1xuLy8gICByZXR1cm4gcGFyc2VyLnBhcnNlKHJhdyk7XG4vLyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJzdGl0dXRlUGFyYW1ldGVyIChzb3VyY2U6IFBhcmFtLCB0YXJnZXQ6IFBhcmFtLCBleHByZXNzaW9uOiBFeHByKSB7XG4gIGNvbnN0IHZpc2l0b3IgPSBuZXcgY2xhc3MgZXh0ZW5kcyBDb252ZXJ0VmlzaXRvciB7XG4gICAgICB2aXNpdFBhcmFtKHA6IFBhcmFtKSB7IHJldHVybiBwLmVxKHNvdXJjZSkgPyB0YXJnZXQgOiBwOyB9XG4gIH1cbiAgcmV0dXJuIGV4cHJlc3Npb24uYWNjZXB0KHZpc2l0b3IpO1xufSJdfQ==
export var BinaryOperation;
(function (BinaryOperation) {
    BinaryOperation["EQ"] = "eq";
    BinaryOperation["NEQ"] = "neq";
    BinaryOperation["GT"] = "gt";
    BinaryOperation["LT"] = "lt";
    BinaryOperation["GE"] = "ge";
    BinaryOperation["LE"] = "le";
    BinaryOperation["OR"] = "or";
    BinaryOperation["AND"] = "and";
    BinaryOperation["MUL"] = "mul";
    BinaryOperation["DIV"] = "div";
    BinaryOperation["MOD"] = "mod";
    BinaryOperation["ADD"] = "add";
    BinaryOperation["SUB"] = "sub";
})(BinaryOperation || (BinaryOperation = {}));
export var UnaryOperation;
(function (UnaryOperation) {
    UnaryOperation["NOT"] = "not";
    UnaryOperation["NEG"] = "neg";
    UnaryOperation["IS_NULL"] = "null";
})(UnaryOperation || (UnaryOperation = {}));
export class ConvertVisitor {
    visitConst(expr) {
        return expr;
    }
    visitProp(expr) {
        return new Prop(expr.instance.accept(this), expr.name);
    }
    visitParam(expr) {
        return expr;
    }
    visitBinary(expr) {
        return new BinOp(expr.left.accept(this), expr.op, expr.right.accept(this));
    }
    visitUnary(expr) {
        return new UnOp(expr.op, expr.operand.accept(this));
    }
    visitCall(expr) {
        return new Call(expr.name, expr.args.map((e) => e.accept(this)));
    }
    visitLambda(expr) {
        return new Lambda(expr.body.accept(this), expr.param);
    }
}
const emptyContext = () => {
    const keys = [];
    const names = [];
    let next = 0;
    return {
        symbolToString(symbol) {
            const index = keys.indexOf(symbol);
            if (-1 !== index) {
                return names[index];
            }
            const name = `e${++next}`;
            keys.push(symbol);
            names.push(name);
            return name;
        }
    };
};
export class Expr {
}
export class Const extends Expr {
    constructor(value) {
        super();
        this.value = value;
    }
    accept(visitor) {
        return visitor.visitConst(this);
    }
    eq(other) {
        return other instanceof Const && other.value === this.value;
    }
    toString() {
        return JSON.stringify(this.value);
    }
}
export class Prop extends Expr {
    constructor(instance, name) {
        super();
        this.instance = instance;
        this.name = name;
    }
    accept(visitor) {
        return visitor.visitProp(this);
    }
    eq(other) {
        return other instanceof Prop && other.instance.eq(this.instance) && other.name === this.name;
    }
    toString(context) {
        const ctx = context || emptyContext();
        return `${this.instance.toString(ctx)}.${this.name}`;
    }
}
export class Param extends Expr {
    constructor(name) {
        super();
        this.name = name;
    }
    accept(visitor) {
        return visitor.visitParam(this);
    }
    eq(other) {
        return other instanceof Param && other.name === this.name;
    }
    toString(context) {
        // in protocol v1 param may be string...
        if ('string' === typeof this.name) {
            return this.name;
        }
        const ctx = context || emptyContext();
        return ctx.symbolToString(this.name);
    }
}
export class BinOp extends Expr {
    constructor(left, op, right) {
        super();
        this.left = left;
        this.op = op;
        this.right = right;
    }
    static unwind(head, tail) {
        if (!tail || !tail.length) {
            return head;
        }
        return tail.reduce((left, vals) => {
            const op = vals[1];
            const right = vals[3];
            return new BinOp(left, op, right);
        }, head);
    }
    accept(visitor) {
        return visitor.visitBinary(this);
    }
    eq(other) {
        return other instanceof BinOp && other.op === this.op && other.left.eq(this.left) && other.right.eq(this.right);
    }
    toString(context) {
        const ctx = context || emptyContext();
        return `(${this.left.toString(ctx)} ${BinOp.binOpStrings[this.op]} ${this.right.toString(ctx)})`;
    }
}
BinOp.binOpStrings = {
    [BinaryOperation.EQ]: '=',
    [BinaryOperation.NEQ]: '!=',
    [BinaryOperation.GT]: '>',
    [BinaryOperation.LT]: '<',
    [BinaryOperation.LE]: '<=',
    [BinaryOperation.GE]: '>=',
    [BinaryOperation.OR]: '||',
    [BinaryOperation.AND]: '&&',
    [BinaryOperation.MUL]: '*',
    [BinaryOperation.DIV]: '/',
    [BinaryOperation.MOD]: '%',
    [BinaryOperation.ADD]: '+',
    [BinaryOperation.SUB]: '-'
};
export class UnOp extends Expr {
    constructor(op, operand) {
        super();
        this.op = op;
        this.operand = operand;
    }
    accept(visitor) {
        return visitor.visitUnary(this);
    }
    eq(other) {
        return other instanceof UnOp && other.op === this.op && other.operand.eq(this.operand);
    }
    toString(context) {
        const ctx = context || emptyContext();
        if (this.op === UnaryOperation.NOT) {
            return `!(${this.operand.toString(ctx)})`;
        }
        return `${UnOp.unOpStrings[this.op]}(${this.operand.toString(ctx)})`;
    }
}
UnOp.unOpStrings = {
    [UnaryOperation.NOT]: 'not',
    [UnaryOperation.NEG]: 'neg',
    [UnaryOperation.IS_NULL]: 'isNull'
};
export class Call extends Expr {
    constructor(name, args) {
        super();
        if (Call.knownFunctions[name]) {
            const argCount = Call.knownFunctions[name];
            if ('number' === typeof argCount) {
                if (argCount !== args.length) {
                    throw new Error(`invalid argument count for ${name}: ${args.length}, accepted argument count: ${argCount}`);
                }
            }
            else {
                if (-1 === argCount.indexOf(args.length)) {
                    // tslint:disable-next-line:max-line-length
                    throw new Error(`invalid argument count for ${name}: ${args.length}, accepted argument counts: ${argCount.join(',')}`);
                }
            }
        }
        this.name = name;
        this.args = args;
    }
    accept(visitor) {
        return visitor.visitCall(this);
    }
    eq(other) {
        if (!(other instanceof Call)) {
            return false;
        }
        if (other.name !== this.name) {
            return false;
        }
        if (other.args.length !== this.args.length) {
            return false;
        }
        for (let i = 0; i < other.args.length; i = i + 1) {
            if (!other.args[i].eq(this.args[i])) {
                return false;
            }
        }
        return true;
    }
    toString(context) {
        const ctx = context || emptyContext();
        return `${this.name}(${this.args.map((arg) => arg.toString(ctx)).join(',')})`;
    }
}
Call.knownFunctions = {
    contains: 2,
    substring: [2, 3]
};
export class Lambda extends Expr {
    constructor(body, param) {
        super();
        this.body = body;
        this.param = param;
    }
    accept(visitor) {
        return visitor.visitLambda(this);
    }
    eq(other) {
        if (!(other instanceof Lambda)) {
            return false;
        }
        throw new Error('Lambda equality is not implemented!');
    }
    toString(context) {
        const ctx = context || emptyContext();
        return `${this.param.toString(ctx)} => ${this.body.toString(ctx)}`;
    }
    substituteParameter(target) {
        return new Lambda(substituteParameter(this.param, target, this.body), target);
    }
    and(other) {
        if (this.param.eq(other.param)) {
            return new Lambda(new BinOp(this.body, BinaryOperation.AND, other.body), this.param);
        }
        return new Lambda(new BinOp(this.body, BinaryOperation.AND, other.substituteParameter(this.param).body), this.param);
    }
}
// export function parse (raw : string) : Expr {
//   return parser.parse(raw);
// }
export function substituteParameter(source, target, expression) {
    const visitor = new (class extends ConvertVisitor {
        visitParam(p) { return p.eq(source) ? target : p; }
    })();
    return expression.accept(visitor);
}
//# sourceMappingURL=data:application/json;base64,
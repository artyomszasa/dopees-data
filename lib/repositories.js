export class CancelledError extends Error {
    constructor() { super('operation has been cancelled'); }
}
const dummySubscription = {
    remove() { }
};
export class Cancellation {
    throwIfCancelled() {
        if (this.cancelled) {
            throw new CancelledError();
        }
    }
}
Cancellation.none = {
    cancelled: false,
    subscribe(_) { return dummySubscription; },
    throwIfCancelled() { }
};
export const None = {};
export class CancellationSource extends Cancellation {
    constructor() {
        super(...arguments);
        this.callbacks = new Array();
        this.cancelled = false;
    }
    static link(cancellation1, cancellation2) {
        return { get cancelled() { return cancellation1.cancelled || cancellation2.cancelled; } };
    }
    get cancellation() { return this; }
    cancel() {
        this.cancelled = true;
        this.callbacks.forEach(callback => callback());
        this.callbacks.splice(0, this.callbacks.length);
    }
    subscribe(callback) {
        if (this.callbacks.some(x => x === callback)) {
            throw new Error('callback already registered');
        }
        this.callbacks.push(callback);
        const that = this;
        return {
            remove() {
                const index = that.callbacks.indexOf(callback);
                if (-1 !== index) {
                    that.callbacks.splice(index, 1);
                }
            }
        };
    }
}
export var QuerySortDirection;
(function (QuerySortDirection) {
    QuerySortDirection["Asc"] = "asc";
    QuerySortDirection["Desc"] = "desc";
})(QuerySortDirection || (QuerySortDirection = {}));
export class Query {
    async forEach(callback, cancellation) {
        const iterator = this.exec();
        let index = 0;
        const runner = async () => {
            const res = await iterator.next(cancellation);
            if (res.done) {
                return;
            }
            await callback(res.value, index);
            ++index;
            return await runner();
        };
        await runner();
    }
    async toArray(cancellation) {
        const result = new Array();
        await this.forEach(async (item) => result.push(item), cancellation);
        return result;
    }
    async first(cancellation) {
        const iterator = this.exec();
        try {
            const first = await iterator.next(cancellation);
            if (first.done) {
                throw new Error('sequence contains no elements');
            }
            return first.value;
        }
        finally {
            iterator.cancel();
        }
    }
    async tryFirst(cancellation) {
        const iterator = this.exec();
        try {
            const first = await iterator.next(cancellation);
            return first.done ? None : first.value;
        }
        finally {
            iterator.cancel();
        }
    }
    async single(cancellation) {
        const iterator = this.exec();
        try {
            const first = await iterator.next(cancellation);
            if (first.done) {
                throw new Error('sequence contains no elements');
            }
            const next = await iterator.next(cancellation);
            if (!next.done) {
                throw new Error('sequence contains more than 1 element elements');
            }
            return first.value;
        }
        finally {
            iterator.cancel();
        }
    }
    async trySingle(cancellation) {
        const iterator = this.exec();
        try {
            const first = await iterator.next(cancellation);
            if (first.done) {
                return None;
            }
            const next = await iterator.next(cancellation);
            if (!next.done) {
                throw new Error('sequence contains more than 1 element elements');
            }
            return first.value;
        }
        finally {
            iterator.cancel();
        }
    }
}
export class RepositoryStore {
    constructor() {
        this.store = {};
    }
    __get(name) {
        const factory = this.store[name];
        if (!factory) {
            throw new Error(`no repository has been registered for ${name}`);
        }
        return factory();
    }
    register(name, factory) {
        this.store[name] = factory;
    }
    get(name) { return this.__get(name); }
    getRepository(name) { return this.__get(name); }
}
const repositories = new RepositoryStore();
export { repositories };
//# sourceMappingURL=data:application/json;base64,
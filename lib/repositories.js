import { CancellationSource } from 'dopees-core/lib/cancellation';
export class None {
}
export const none = new None();
export var QuerySortDirection;
(function (QuerySortDirection) {
    QuerySortDirection["Asc"] = "asc";
    QuerySortDirection["Desc"] = "desc";
})(QuerySortDirection || (QuerySortDirection = {}));
// ensure asyncIterator is present...
if (!Symbol.asyncIterator) {
    Symbol.asyncIterator = Symbol('asyncIterator');
}
// POLYFILL --> for await (xx in yy) is not yet supported :(
async function asyncForEach(iterable, callback) {
    // when supported this should be used...
    // for await (const item of iterable) {
    //   await callback(item);
    // }
    const iterator = iterable[Symbol.asyncIterator]();
    let res = await iterator.next();
    while (!res.done) {
        await callback(res.value);
        res = await iterator.next();
    }
}
export class Query {
    async forEach(callback, cancellation) {
        const iterable = this.exec(cancellation);
        let index = 0;
        // FIXME: when implemented replace with "for await"
        await asyncForEach(iterable, (item) => callback(item, index++));
    }
    async toArray(cancellation) {
        const result = new Array();
        await this.forEach(async (item) => result.push(item), cancellation);
        return result;
    }
    async first(cancellation) {
        const firstDone = new CancellationSource();
        const iterable = this.exec(cancellation ? CancellationSource.link(firstDone, cancellation) : firstDone);
        // TODO: when implemented replace with the one below
        const iterator = iterable[Symbol.asyncIterator]();
        const res = await iterator.next();
        if (!res.done) {
            firstDone.cancel();
            return res;
        }
        // for await (const item of iterable) {
        //   firstDone.cancel();
        //   return item;
        // }
        throw new Error('sequence contains no elements');
    }
    async tryFirst(cancellation) {
        const firstDone = new CancellationSource();
        const iterable = this.exec(cancellation ? CancellationSource.link(firstDone, cancellation) : firstDone);
        // TODO: when implemented replace with the one below
        const iterator = iterable[Symbol.asyncIterator]();
        const res = await iterator.next();
        if (!res.done) {
            firstDone.cancel();
            return res;
        }
        // for await (const item of iterable) {
        //   firstDone.cancel();
        //   return item;
        // }
        return none;
    }
    async single(cancellation) {
        let result = none;
        const iterable = this.exec(cancellation);
        // TODO: when implemented replace with the one below
        const iterator = iterable[Symbol.asyncIterator]();
        let res = await iterator.next();
        if (!res.done) {
            result = res.value;
        }
        else {
            throw new Error('sequence contains no elements');
        }
        res = await iterator.next();
        if (!res.done) {
            throw new Error('sequence contains more than 1 element elements');
        }
        // for await (const item of iterable) {
        //   if (none !== result) {
        //     throw new Error('sequence contains more than 1 element elements');
        //   } else {
        //     result = item;
        //   }
        // }
        // if (none === result) {
        //   throw new Error('sequence contains no elements');
        // }
        return result;
    }
    async trySingle(cancellation) {
        let result = none;
        const iterable = this.exec(cancellation);
        // TODO: when implemented replace with the one below
        const iterator = iterable[Symbol.asyncIterator]();
        let res = await iterator.next();
        if (!res.done) {
            result = res.value;
        }
        else {
            return none;
        }
        res = await iterator.next();
        if (!res.done) {
            throw new Error('sequence contains more than 1 element elements');
        }
        // for await (const item of iterable) {
        //   if (none !== result) {
        //     throw new Error('sequence contains more than 1 element elements');
        //   } else {
        //     result = item;
        //   }
        // }
        return result;
    }
}
export class RepositoryStore {
    constructor() {
        this.store = {};
    }
    __get(name) {
        const factory = this.store[name];
        if (!factory) {
            throw new Error(`no repository has been registered for ${name}`);
        }
        return factory();
    }
    register(name, factory) {
        this.store[name] = factory;
    }
    get(name) { return this.__get(name); }
    getRepository(name) { return this.__get(name); }
}
export const repositories = new RepositoryStore();
//# sourceMappingURL=data:application/json;base64,
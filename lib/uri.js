// see: https://tools.ietf.org/html/rfc3986
const regexUri = /^(([a-z][a-z0-9+.-]*):)?(\/\/(([!$&\\'()*,;=a-z0-9._~-]|%[0-9a-f][0-9a-f])*)(\:([0-9]+))?)?(([\/!$&\\'()*,;=:@a-z0-9._~-]|%[0-9a-f][0-9a-f])*)(\?([!$&\\'()*,;=:@a-z0-9._~\/?-]|%[0-9a-f][0-9a-f])*)?(\#.*)?$/i;
const parseQuery = (params, raw) => {
    raw
        .split('&')
        .forEach(one => {
        if (one) {
            const i = one.indexOf('=');
            if (-1 === i) {
                params[one] = null;
            }
            else {
                params[one.substring(0, i)] = decodeURIComponent(one.substring(i + 1));
            }
        }
    });
};
const parse = (uri, raw) => {
    const m = regexUri.exec(raw);
    if (m) {
        uri.scheme = m[2];
        uri.host = m[4];
        uri.path = m[8];
        uri.port = parseInt(m[7], 10) || Uri.defaultPorts[uri.scheme] || 0;
        uri.query = (m[10] && m[10].substr(1) || '');
        uri.fragment = (m[12] && m[12].substr(1) || '');
    }
};
export default class Uri {
    constructor(raw) {
        const m = regexUri.exec(raw);
        if (m) {
            this.scheme = m[2];
            this.host = m[4];
            this.path = m[8];
            this.port = parseInt(m[7], 10) || Uri.defaultPorts[this.scheme] || 0;
            this.queryParams = {};
            this.query = (m[10] && m[10].substr(1) || '');
            this.fragment = (m[12] && m[12].substr(1) || '');
        }
        else {
            throw new TypeError('invalid uri');
        }
    }
    static create(source) {
        if ('string' === typeof source) {
            return new Uri(source);
        }
        return new Uri(source.href);
    }
    get authority() {
        if (this.port && this.port !== Uri.defaultPorts[this.scheme]) {
            return `${this.host}:${this.port}`;
        }
        return this.host;
    }
    set authority(authority) {
        const i = authority.indexOf(':');
        if (-1 === i) {
            this.host = authority;
            this.port = 0;
        }
        else {
            this.host = authority.substr(0, i);
            this.port = parseInt(authority.substr(i + 1), 10) || 0;
        }
    }
    get href() {
        const query = this.query;
        const queryString = query ? `?${query}` : '';
        const fragment = this.fragment ? `#${this.fragment}` : '';
        const authority = this.authority ? `//${this.authority}` : '';
        const scheme = this.scheme ? `${this.scheme}:` : '';
        return `${scheme}${authority}${this.path}${queryString}${fragment}`;
    }
    get isRelative() {
        return !this.scheme;
    }
    get isAbsolute() {
        return !!this.scheme;
    }
    get query() {
        const queryParams = this.queryParams || {};
        return Object.keys(queryParams)
            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(queryParams[key])}`)
            .join('&');
    }
    set query(query) {
        parseQuery(this.queryParams, query);
    }
    toString() { return this.href; }
}
Uri.defaultPorts = {
    'http': 80,
    'https': 443
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3VyaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQ0FBMkM7QUFDM0MsTUFBTSxRQUFRLEdBQUcsZ05BQWdOLENBQUM7QUFFbE8sTUFBTSxVQUFVLEdBQUcsQ0FBQyxNQUFZLEVBQUUsR0FBWSxFQUFFLEVBQUU7SUFDOUMsR0FBRztTQUNFLEtBQUssQ0FBQyxHQUFHLENBQUM7U0FDVixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDWCxJQUFJLEdBQUcsRUFBRTtZQUNMLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ1YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQzthQUN0QjtpQkFBTTtnQkFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzFFO1NBQ0o7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNYLENBQUMsQ0FBQztBQUNGLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBUyxFQUFFLEdBQVksRUFBRSxFQUFFO0lBQ3RDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsSUFBSSxDQUFDLEVBQUU7UUFDSCxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQixHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQixHQUFHLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25FLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM3QyxHQUFHLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7S0FDbkQ7QUFDTCxDQUFDLENBQUM7QUFVRixNQUFNLENBQUMsT0FBTyxPQUFPLEdBQUc7SUF3RHBCLFlBQVksR0FBWTtRQUNwQixNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxFQUFFO1lBQ0gsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyRSxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztZQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3BEO2FBQU07WUFDSCxNQUFNLElBQUksU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3RDO0lBQ0wsQ0FBQztJQWhFRCxNQUFNLENBQUMsTUFBTSxDQUFFLE1BQXFCO1FBQ2hDLElBQUksUUFBUSxLQUFLLE9BQU8sTUFBTSxFQUFFO1lBQzVCLE9BQU8sSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDMUI7UUFDRCxPQUFPLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBT0QsSUFBSSxTQUFTO1FBQ1QsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUQsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3RDO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFDRCxJQUFJLFNBQVMsQ0FBRSxTQUFTO1FBQ3BCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztZQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztTQUNqQjthQUFNO1lBQ0gsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUQ7SUFDTCxDQUFDO0lBQ0QsSUFBSSxJQUFJO1FBQ0osTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN6QixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUM3QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzFELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDOUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNwRCxPQUFPLEdBQUcsTUFBTSxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsR0FBRyxRQUFRLEVBQUUsQ0FBQztJQUN4RSxDQUFDO0lBQ0QsSUFBSSxVQUFVO1FBQ1YsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUNELElBQUksVUFBVTtRQUNWLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUNELElBQUksS0FBSztRQUNMLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO1FBQzNDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7YUFDMUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO2FBQ2hGLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBQ0QsSUFBSSxLQUFLLENBQUUsS0FBSztRQUNaLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFlRCxRQUFRLEtBQU0sT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs7QUFyRTFCLGdCQUFZLEdBQXFCO0lBQ3BDLE1BQU0sRUFBRSxFQUFFO0lBQ1YsT0FBTyxFQUFFLEdBQUc7Q0FDZixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc2VlOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NlxuY29uc3QgcmVnZXhVcmkgPSAvXigoW2Etel1bYS16MC05Ky4tXSopOik/KFxcL1xcLygoWyEkJlxcXFwnKCkqLDs9YS16MC05Ll9+LV18JVswLTlhLWZdWzAtOWEtZl0pKikoXFw6KFswLTldKykpPyk/KChbXFwvISQmXFxcXCcoKSosOz06QGEtejAtOS5ffi1dfCVbMC05YS1mXVswLTlhLWZdKSopKFxcPyhbISQmXFxcXCcoKSosOz06QGEtejAtOS5fflxcLz8tXXwlWzAtOWEtZl1bMC05YS1mXSkqKT8oXFwjLiopPyQvaTtcblxuY29uc3QgcGFyc2VRdWVyeSA9IChwYXJhbXMgOiBhbnksIHJhdyA6IHN0cmluZykgPT4ge1xuICAgIHJhd1xuICAgICAgICAuc3BsaXQoJyYnKVxuICAgICAgICAuZm9yRWFjaChvbmUgPT4ge1xuICAgICAgICAgICAgaWYgKG9uZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBvbmUuaW5kZXhPZignPScpO1xuICAgICAgICAgICAgICAgIGlmICgtMSA9PT0gaSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXNbb25lXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zW29uZS5zdWJzdHJpbmcoMCwgaSldID0gZGVjb2RlVVJJQ29tcG9uZW50KG9uZS5zdWJzdHJpbmcoaSArIDEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufTtcbmNvbnN0IHBhcnNlID0gKHVyaSA6IFVyaSwgcmF3IDogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgbSA9IHJlZ2V4VXJpLmV4ZWMocmF3KTtcbiAgICBpZiAobSkge1xuICAgICAgICB1cmkuc2NoZW1lID0gbVsyXTtcbiAgICAgICAgdXJpLmhvc3QgPSBtWzRdO1xuICAgICAgICB1cmkucGF0aCA9IG1bOF07XG4gICAgICAgIHVyaS5wb3J0ID0gcGFyc2VJbnQobVs3XSwgMTApIHx8IFVyaS5kZWZhdWx0UG9ydHNbdXJpLnNjaGVtZV0gfHwgMDtcbiAgICAgICAgdXJpLnF1ZXJ5ID0gKG1bMTBdICYmIG1bMTBdLnN1YnN0cigxKSB8fCAnJyk7XG4gICAgICAgIHVyaS5mcmFnbWVudCA9IChtWzEyXSAmJiBtWzEyXS5zdWJzdHIoMSkgfHwgJycpO1xuICAgIH1cbn07XG5cbmludGVyZmFjZSBVcmlEZWZhdWx0UG9ydHMge1xuICAgIFtzY2hlbWUgOiBzdHJpbmddIDogbnVtYmVyXG59XG5cbmludGVyZmFjZSBVcmlRdWVyeVBhcmFtcyB7XG4gICAgW25hbWUgOiBzdHJpbmddIDogc3RyaW5nXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVyaSB7XG4gICAgc3RhdGljIGRlZmF1bHRQb3J0cyA6IFVyaURlZmF1bHRQb3J0cyA9IHtcbiAgICAgICAgJ2h0dHAnOiA4MCxcbiAgICAgICAgJ2h0dHBzJzogNDQzXG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGUgKHNvdXJjZSA6IFVyaSB8IHN0cmluZykge1xuICAgICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVXJpKHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBVcmkoc291cmNlLmhyZWYpO1xuICAgIH1cbiAgICBzY2hlbWUgOiBzdHJpbmdcbiAgICBob3N0IDogc3RyaW5nXG4gICAgcGF0aCA6IHN0cmluZ1xuICAgIHBvcnQgOiBudW1iZXJcbiAgICBxdWVyeVBhcmFtcyA6IFVyaVF1ZXJ5UGFyYW1zXG4gICAgZnJhZ21lbnQgOiBzdHJpbmdcbiAgICBnZXQgYXV0aG9yaXR5ICgpIHtcbiAgICAgICAgaWYgKHRoaXMucG9ydCAmJiB0aGlzLnBvcnQgIT09IFVyaS5kZWZhdWx0UG9ydHNbdGhpcy5zY2hlbWVdKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5ob3N0fToke3RoaXMucG9ydH1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmhvc3Q7XG4gICAgfVxuICAgIHNldCBhdXRob3JpdHkgKGF1dGhvcml0eSkge1xuICAgICAgICBjb25zdCBpID0gYXV0aG9yaXR5LmluZGV4T2YoJzonKTtcbiAgICAgICAgaWYgKC0xID09PSBpKSB7XG4gICAgICAgICAgICB0aGlzLmhvc3QgPSBhdXRob3JpdHk7XG4gICAgICAgICAgICB0aGlzLnBvcnQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ob3N0ID0gYXV0aG9yaXR5LnN1YnN0cigwLCBpKTtcbiAgICAgICAgICAgIHRoaXMucG9ydCA9IHBhcnNlSW50KGF1dGhvcml0eS5zdWJzdHIoaSArIDEpLCAxMCkgfHwgMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaHJlZiAoKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5xdWVyeTtcbiAgICAgICAgY29uc3QgcXVlcnlTdHJpbmcgPSBxdWVyeSA/IGA/JHtxdWVyeX1gIDogJyc7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gdGhpcy5mcmFnbWVudCA/IGAjJHt0aGlzLmZyYWdtZW50fWAgOiAnJztcbiAgICAgICAgY29uc3QgYXV0aG9yaXR5ID0gdGhpcy5hdXRob3JpdHkgPyBgLy8ke3RoaXMuYXV0aG9yaXR5fWAgOiAnJztcbiAgICAgICAgY29uc3Qgc2NoZW1lID0gdGhpcy5zY2hlbWUgPyBgJHt0aGlzLnNjaGVtZX06YCA6ICcnO1xuICAgICAgICByZXR1cm4gYCR7c2NoZW1lfSR7YXV0aG9yaXR5fSR7dGhpcy5wYXRofSR7cXVlcnlTdHJpbmd9JHtmcmFnbWVudH1gO1xuICAgIH1cbiAgICBnZXQgaXNSZWxhdGl2ZSAoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5zY2hlbWU7XG4gICAgfVxuICAgIGdldCBpc0Fic29sdXRlICgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5zY2hlbWU7XG4gICAgfVxuICAgIGdldCBxdWVyeSAoKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gdGhpcy5xdWVyeVBhcmFtcyB8fCB7fTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHF1ZXJ5UGFyYW1zKVxuICAgICAgICAgICAgLm1hcChrZXkgPT4gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGtleSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5UGFyYW1zW2tleV0pfWApXG4gICAgICAgICAgICAuam9pbignJicpO1xuICAgIH1cbiAgICBzZXQgcXVlcnkgKHF1ZXJ5KSB7XG4gICAgICAgIHBhcnNlUXVlcnkodGhpcy5xdWVyeVBhcmFtcywgcXVlcnkpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihyYXcgOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgbSA9IHJlZ2V4VXJpLmV4ZWMocmF3KTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1lID0gbVsyXTtcbiAgICAgICAgICAgIHRoaXMuaG9zdCA9IG1bNF07XG4gICAgICAgICAgICB0aGlzLnBhdGggPSBtWzhdO1xuICAgICAgICAgICAgdGhpcy5wb3J0ID0gcGFyc2VJbnQobVs3XSwgMTApIHx8IFVyaS5kZWZhdWx0UG9ydHNbdGhpcy5zY2hlbWVdIHx8IDA7XG4gICAgICAgICAgICB0aGlzLnF1ZXJ5UGFyYW1zID0ge307XG4gICAgICAgICAgICB0aGlzLnF1ZXJ5ID0gKG1bMTBdICYmIG1bMTBdLnN1YnN0cigxKSB8fCAnJyk7XG4gICAgICAgICAgICB0aGlzLmZyYWdtZW50ID0gKG1bMTJdICYmIG1bMTJdLnN1YnN0cigxKSB8fCAnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHVyaScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvU3RyaW5nICgpIHsgcmV0dXJuIHRoaXMuaHJlZjsgfVxufVxuXG5leHBvcnQge1xuICAgIFVyaURlZmF1bHRQb3J0cyxcbiAgICBVcmlRdWVyeVBhcmFtc1xufSJdfQ==